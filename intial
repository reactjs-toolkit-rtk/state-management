
--------------------------------------------------------------------------------
router.put('/reject-kyc/:kycId', async (req, res) => {
  try {
    const { kycId } = req.params;

    const existingUser = await KYC.findOne({ _id: kycId });
    if (!existingUser) {
      return res.status(404).json({ message: 'KYC entry not found' });
    }

    if (existingUser.rejected) {
      return res.status(400).json({ message: 'KYC entry already rejected' });
    }

    const kycbeforeid = existingUser.userId;

    // Update the status in the admin KYC
    const adminKYC = await AdminKYC.findOne({ kycid: kycbeforeid });
    if (adminKYC) {
      adminKYC.rejected = true;
      await adminKYC.save();
    }

    existingUser.rejected = true;
    await existingUser.save();

    res.status(200).json({ message: 'KYC entry rejected and status updated.' });
  } catch (error) {
    console.error('Error rejecting KYC:', error);
    res.status(500).json({ message: 'Error rejecting KYC', error: error.message });
  }
});
---------------------------------------------------------------------------------------------
const Kycadmin = () => {
  const { data: kycDetails, isLoading, isError } = useKycdetailsidQuery();

  const handleReject = async (kycId) => {
    try {
      const response = await fetch(`http://localhost:3007/server/reject-kyc/${kycId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const responseData = await response.json();

      if (response.ok) {
        toast.success(responseData.message, {
          position: toast.POSITION.TOP_RIGHT,
          autoClose: 3000,
        });
      } else {
        // Handle the case where the KYC entry has already been rejected
        if (response.status === 400 && responseData.message === 'KYC entry already rejected') {
          toast.warn('KYC entry has already been rejected', {
            position: toast.POSITION.TOP_RIGHT,
            autoClose: 3000,
          });
        } else {
          // Handle other error cases
          toast.error('Error rejecting KYC', {
            position: toast.POSITION.TOP_RIGHT,
            autoClose: 3000,
          });
        }
      }
    } catch (error) {
      console.error('Error rejecting KYC:', error);
    }
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error fetching KYC details</div>;
  }

  return (
    // Your JSX code...
    // Assuming you have a table or list to display KYC details
    <div>
      {kycDetails.map((kyc, index) => (
        <div key={index}>
          {/* Display KYC details here */}
          <p>KYC ID: {kyc._id}</p>
          <button onClick={() => handleReject(kyc._id)}>Reject</button>
          {/* Other KYC details */}
        </div>
      ))}
    </div>
    // Rest of your JSX...
  );
};

export default Kycadmin;
---------------------------------------------------------------------------------------------------------------
router.get('/referalcode_generate', async (req, res) => { 
  try {
    const allOwnerUsers = await User.find({ owner: true }, 'myreferalcode'); // Fetching all users with owner field set to true and their referral codes
    if (!allOwnerUsers || allOwnerUsers.length === 0) {
      return res.status(404).json({ message: 'No users found with owner privileges' });
    }

    // Extracting an array of referral codes from fetched documents
    const referralCodesArray = allOwnerUsers.map((user) => user.myreferalcode);

    // Selecting a random referral code from the array
    const randomIndex = Math.floor(Math.random() * referralCodesArray.length);
    const randomReferralCode = referralCodesArray[randomIndex];

    res.status(200).json({ randomReferralCode });
  } catch (error) {
    console.error('Error fetching random referral code:', error);
    res.status(500).send('Error fetching referral code');
  }
});
---------------------------------------------------------------------------------------------------------------------------------------------

import * as Yup from 'yup';

// ... existing code

const YourComponent = () => {
  // ... existing code

  const validationSchema = Yup.object().shape({
    newPattern: Yup.array().required('New Pattern is required'),
    confirmPattern: Yup.array().required('Confirm Pattern is required')
      .oneOf([Yup.ref('newPattern')], 'Patterns must match'),
  });

  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(validationSchema),
    mode: 'all',
  });

  // ... existing code

  const handlePatternSubmit = async () => {
    try {
      // ... existing code
      
      const response = await axios.put('http://localhost:3007/server/admin/pattern', {
        newPattern,
      });
      
      // Handle success message or redirection
    } catch (error) {
      // Handle error
    }
  };

  return (
    <div className="bg-light min-vh-100 d-flex flex-row align-items-center">
      {/* ... existing code */}
      
      <CModal
        show={showOTPModal}
        onClose={() => setShowOTPModal(false)}
      >
        <CModalHeader closeButton>
          <CModalTitle>Set New Pattern</CModalTitle>
        </CModalHeader>
        <CModalBody>
          <form onSubmit={handleSubmit(handlePatternSubmit)}>
            <PatternLock
              width={300}
              pointSize={15}
              size={3}
              path={newPattern}
              onChange={handlePatternChange}
              onFinish={() => {}}
            />
            {errors.newPattern && <p className="text-danger">{errors.newPattern.message}</p>}
            <PatternLock
              width={300}
              pointSize={15}
              size={3}
              path={confirmPattern}
              onChange={handleConfirmPatternChange}
              onFinish={() => {}}
            />
            {errors.confirmPattern && <p className="text-danger">{errors.confirmPattern.message}</p>}
            <CButton color="primary" type="submit">
              Set Pattern
            </CButton>
          </form>
        </CModalBody>
        {/* ... existing code */}
      </CModal>
    </div>
  );
};

export default YourComponent;
------------------------------------------------
const Admin = require('../models/Admin'); // Import your Mongoose model

router.put('/admin/pattern', async (req, res) => {
  try {
    const { newPattern } = req.body;
    const adminId = req.user.id; // Assuming you have the admin's ID from authentication

    // Update the pattern for the logged-in admin user in the database
    const updatedAdmin = await Admin.findByIdAndUpdate(
      adminId,
      { patternlock: newPattern },
      { new: true } // To return the updated document
    );

    if (!updatedAdmin) {
      return res.status(404).json({ message: 'Admin user not found' });
    }

    return res.status(200).json({ message: 'Pattern updated successfully', updatedAdmin });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Server error' });
  }
});
----------------------------------------------------
// TwoFactorAuthPage.jsx

import React, { useState } from 'react';
import axios from 'axios';

const TwoFactorAuthPage = () => {
  const [twoFactorCode, setTwoFactorCode] = useState('');
  const [verificationMessage, setVerificationMessage] = useState('');

  const handleVerification = async () => {
    try {
      const response = await axios.post('http://localhost:3007/server/verify-2fa', {
        twoFactorCode,
      });

      setVerificationMessage(response.data.message || 'Verification successful');
    } catch (error) {
      setVerificationMessage(error.response.data.message || 'Verification failed');
    }
  };

  return (
    <div>
      <h1>Two-Factor Authentication</h1>
      <input
        type="text"
        placeholder="Enter 2FA Code"
        value={twoFactorCode}
        onChange={(e) => setTwoFactorCode(e.target.value)}
      />
      <button onClick={handleVerification}>Verify</button>
      <p>{verificationMessage}</p>
    </div>
  );
};

export default TwoFactorAuthPage;
-------------------------------------------------------
npm install speakeasy

---------------------------------
const speakeasy = require('speakeasy');

// Your user should have a secret key associated with 2FA during setup

router.post('/verify-2fa', async (req, res) => {
  try {
    const { twoFactorCode, userSecret } = req.body;
    
    // Verify the 2FA code using the secret key
    const verified = speakeasy.totp.verify({
      secret: userSecret, // The secret key associated with the user
      encoding: 'base32',
      token: twoFactorCode,
    });

    if (verified) {
      return res.status(200).json({ message: 'Verification successful' });
    } else {
      return res.status(400).json({ message: 'Invalid code' });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Server error' });
  }
});
----------------------------------------------------------------------------------------------------------------------------------------------------------
