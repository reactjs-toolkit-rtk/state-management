  <Route exact path="/user-details/:userId" component={UserDetails} />
-------------------------------------------------------------------------
<CTableDataCell>
            <Link to={`/user-details/${user._id}`}>{user._id}</Link>
          </CTableDataCell>
----------------------------------------------------
import { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const UserDetails = () => {
  const { userId } = useParams();
  const [userDetails, setUserDetails] = useState(null);

  useEffect(() => {
    const fetchUserDetails = async () => {
      try {
        const response = await axios.get(`http://localhost:3007/server/user-details/${userId}`);
        setUserDetails(response.data);
      } catch (error) {
        console.error('Error fetching user details:', error);
      }
    };

    fetchUserDetails();
  }, [userId]);

  return (
    <div>
      {userDetails ? (
        <div>
          <h2>User Details</h2>
          {/* Display user details here */}
          {/* Example: */}
          <p>User ID: {userDetails._id}</p>
          <p>Email: {userDetails.email}</p>
          {/* Display other details */}
        </div>
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
};

export default UserDetails;
------------------------------------------------------------------
router.get('/user-details/:userId', async (req, res) => {
  const userId = req.params.userId; // Get the user ID from the request parameters

  try {
    const userDetails = await User.findById(userId); // Find user details by ID
    if (!userDetails) {
      return res.status(404).json({ message: 'User not found' }); // If user ID doesn't exist
    }
    res.status(200).json(userDetails); // Send user details if found
  } catch (error) {
    console.error('Error fetching user details:', error);
    res.status(500).json({ message: 'Server Error' });
  }
});
--------------------------------------------------------------------------------
router.put('/reject-kyc/:kycId', async (req, res) => {
  try {
    const { kycId } = req.params;

    const existingUser = await KYC.findOne({ _id: kycId });
    if (!existingUser) {
      return res.status(404).json({ message: 'KYC entry not found' });
    }

    if (existingUser.rejected) {
      return res.status(400).json({ message: 'KYC entry already rejected' });
    }

    const kycbeforeid = existingUser.userId;

    // Update the status in the admin KYC
    const adminKYC = await AdminKYC.findOne({ kycid: kycbeforeid });
    if (adminKYC) {
      adminKYC.rejected = true;
      await adminKYC.save();
    }

    existingUser.rejected = true;
    await existingUser.save();

    res.status(200).json({ message: 'KYC entry rejected and status updated.' });
  } catch (error) {
    console.error('Error rejecting KYC:', error);
    res.status(500).json({ message: 'Error rejecting KYC', error: error.message });
  }
});
---------------------------------------------------------------------------------------------
const Kycadmin = () => {
  const { data: kycDetails, isLoading, isError } = useKycdetailsidQuery();

  const handleReject = async (kycId) => {
    try {
      const response = await fetch(`http://localhost:3007/server/reject-kyc/${kycId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const responseData = await response.json();

      if (response.ok) {
        toast.success(responseData.message, {
          position: toast.POSITION.TOP_RIGHT,
          autoClose: 3000,
        });
      } else {
        // Handle the case where the KYC entry has already been rejected
        if (response.status === 400 && responseData.message === 'KYC entry already rejected') {
          toast.warn('KYC entry has already been rejected', {
            position: toast.POSITION.TOP_RIGHT,
            autoClose: 3000,
          });
        } else {
          // Handle other error cases
          toast.error('Error rejecting KYC', {
            position: toast.POSITION.TOP_RIGHT,
            autoClose: 3000,
          });
        }
      }
    } catch (error) {
      console.error('Error rejecting KYC:', error);
    }
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error fetching KYC details</div>;
  }

  return (
    // Your JSX code...
    // Assuming you have a table or list to display KYC details
    <div>
      {kycDetails.map((kyc, index) => (
        <div key={index}>
          {/* Display KYC details here */}
          <p>KYC ID: {kyc._id}</p>
          <button onClick={() => handleReject(kyc._id)}>Reject</button>
          {/* Other KYC details */}
        </div>
      ))}
    </div>
    // Rest of your JSX...
  );
};

export default Kycadmin;
