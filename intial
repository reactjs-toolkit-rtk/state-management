
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import * as Yup from 'yup';
import axios from 'axios';
import { CButton } from '@coreui/react';

// Assuming PatternLock is an external component imported somewhere

const YourComponent = () => {
  const [newPattern, setNewPattern] = useState([]);
  const [confirmPattern, setConfirmPattern] = useState([]);

  const handlePatternChange = (pattern) => {
    setNewPattern(pattern);
  };

  const handleConfirmPatternChange = (pattern) => {
    setConfirmPattern(pattern);
  };

  const validationSchema = Yup.object().shape({
    newPattern: Yup.array().required('New Pattern is required'),
    confirmPattern: Yup.array()
      .required('Confirm Pattern is required')
      .oneOf([newPattern], 'Patterns must match'),
  });

  const { handleSubmit, reset, formState: { errors } } = useForm({
    resolver: yupResolver(validationSchema),
    mode: 'all',
  });

  const handlePatternSubmit = async () => {
    try {
      const response = await axios.put('http://localhost:3007/server/admin/pattern', {
        newPattern,
      });
      
      // Handle success message or redirection
    } catch (error) {
      // Handle error
    }
  };

  const handleResetPattern = () => {
    setNewPattern([]);
    setConfirmPattern([]);
    reset(); // Reset form fields and errors
  };

  return (
    <div className="bg-light min-vh-100 d-flex flex-row align-items-center">
      <form onSubmit={handleSubmit(handlePatternSubmit)}>
        {/* PatternLock components */}
        <PatternLock
          width={300}
          pointSize={15}
          size={3}
          path={newPattern}
          onChange={handlePatternChange}
          onFinish={() => {}}
        />
        {errors.newPattern && <p className="text-danger">{errors.newPattern.message}</p>}
        <PatternLock
          width={300}
          pointSize={15}
          size={3}
          path={confirmPattern}
          onChange={handleConfirmPatternChange}
          onFinish={() => {}}
        />
        {errors.confirmPattern && <p className="text-danger">{errors.confirmPattern.message}</p>}
        {/* Submit and Reset buttons */}
        <div>
          <CButton color="primary" type="submit">
            Set Pattern
          </CButton>
          <CButton color="danger" onClick={handleResetPattern}>
            Reset Pattern
          </CButton>
        </div>
      </form>
    </div>
  );
};

export default YourComponent;

------------------------------------------------
const Admin = require('../models/Admin'); // Import your Mongoose model

router.put('/admin/pattern', async (req, res) => {
  try {
    const { newPattern } = req.body;
    const adminId = req.user.id; // Assuming you have the admin's ID from authentication

    // Update the pattern for the logged-in admin user in the database
    const updatedAdmin = await Admin.findByIdAndUpdate(
      adminId,
      { patternlock: newPattern },
      { new: true } // To return the updated document
    );

    if (!updatedAdmin) {
      return res.status(404).json({ message: 'Admin user not found' });
    }

    return res.status(200).json({ message: 'Pattern updated successfully', updatedAdmin });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Server error' });
  }
});
----------------------------------------------------
// TwoFactorAuthPage.jsx

import React, { useState } from 'react';
import axios from 'axios';

const TwoFactorAuthPage = () => {
  const [twoFactorCode, setTwoFactorCode] = useState('');
  const [verificationMessage, setVerificationMessage] = useState('');

  const handleVerification = async () => {
    try {
      const response = await axios.post('http://localhost:3007/server/verify-2fa', {
        twoFactorCode,
      });

      setVerificationMessage(response.data.message || 'Verification successful');
    } catch (error) {
      setVerificationMessage(error.response.data.message || 'Verification failed');
    }
  };

  return (
    <div>
      <h1>Two-Factor Authentication</h1>
      <input
        type="text"
        placeholder="Enter 2FA Code"
        value={twoFactorCode}
        onChange={(e) => setTwoFactorCode(e.target.value)}
      />
      <button onClick={handleVerification}>Verify</button>
      <p>{verificationMessage}</p>
    </div>
  );
};

export default TwoFactorAuthPage;
-------------------------------------------------------
npm install speakeasy

---------------------------------
const speakeasy = require('speakeasy');

// Your user should have a secret key associated with 2FA during setup

router.post('/verify-2fa', async (req, res) => {
  try {
    const { twoFactorCode, userSecret } = req.body;
    
    // Verify the 2FA code using the secret key
    const verified = speakeasy.totp.verify({
      secret: userSecret, // The secret key associated with the user
      encoding: 'base32',
      token: twoFactorCode,
    });

    if (verified) {
      return res.status(200).json({ message: 'Verification successful' });
    } else {
      return res.status(400).json({ message: 'Invalid code' });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Server error' });
  }
});
----------------------------------------------------------------------------------------------------------------------------------------------------------

import React from 'react';
import { useForm } from 'react-hook-form';
import * as Yup from 'yup';

const SocialMediaForm = () => {
  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(validationSchema),
    mode: 'onBlur'
  });

  const validationSchema = Yup.object().shape({
    youtube: Yup.string().url('Invalid YouTube URL').required('YouTube URL is required'),
    instagram: Yup.string().url('Invalid Instagram URL').required('Instagram URL is required'),
    facebook: Yup.string().url('Invalid Facebook URL').required('Facebook URL is required'),
  });

  const onSubmit = async (data) => {
    try {
      const response = await fetch('http://localhost:3007/server/save-social-media-urls', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      // Handle success message or redirection
    } catch (error) {
      // Handle error
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label>YouTube:</label>
        <input type="text" {...register('youtube')} />
        {errors.youtube && <p className="error">{errors.youtube.message}</p>}
      </div>
      <div>
        <label>Instagram:</label>
        <input type="text" {...register('instagram')} />
        {errors.instagram && <p className="error">{errors.instagram.message}</p>}
      </div>
      <div>
        <label>Facebook:</label>
        <input type="text" {...register('facebook')} />
        {errors.facebook && <p className="error">{errors.facebook.message}</p>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default SocialMediaForm;
// socialMediaSchema.js

const mongoose = require('mongoose');

const socialMediaSchema = new mongoose.Schema({
  youtube: { type: String, required: true },
  instagram: { type: String, required: true },
  facebook: { type: String, required: true },
});

const SocialMedia = mongoose.model('SocialMedia', socialMediaSchema);

module.exports = SocialMedia;
// Backend - Express.js

const express = require('express');
const router = express.Router();
const SocialMedia = require('../models/socialMediaSchema'); // Import the SocialMedia schema

router.post('/save-social-media-urls', async (req, res) => {
  try {
    const { youtube, instagram, facebook } = req.body;

    // Create a new SocialMedia document using the Mongoose schema
    const newSocialMedia = new SocialMedia({ youtube, instagram, facebook });

    // Save the newSocialMedia document to the database
    await newSocialMedia.save();

    return res.status(200).json({ message: 'Social media URLs saved successfully' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const SocialMediaLinks = () => {
  const [socialMedia, setSocialMedia] = useState({});

  useEffect(() => {
    const fetchSocialMediaUrls = async () => {
      try {
        const response = await axios.get('http://localhost:3007/server/get-social-media-urls');
        setSocialMedia(response.data);
      } catch (error) {
        console.error('Error fetching social media URLs:', error);
      }
    };

    fetchSocialMediaUrls();
  }, []);

  return (
    <div>
      <h2>Social Media Links</h2>
      <p>YouTube: {socialMedia.youtube}</p>
      <p>Instagram: {socialMedia.instagram}</p>
      <p>Facebook: {socialMedia.facebook}</p>
    </div>
  );
};

export default SocialMediaLinks;
